# docker-compose.yml (in workspace root)
version: '3.8' # Specify compose file version

services:
  citaseps-db:
    container_name: citaseps-sqlserver-db
    image: mcr.microsoft.com/mssql/server:2022-latest # Use the desired SQL Server version
    environment:
      ACCEPT_EULA: "Y" # Required for SQL Server image
      MSSQL_SA_PASSWORD: "${MSSQL_SA_PASSWORD}" # Read password from .env file
      # Optional: Define a default database to be created
      # MSSQL_DB: CitasEPSDb
      # MSSQL_USER: your_app_user # Optional: Create a dedicated user
      # MSSQL_PASSWORD: your_app_user_password # Optional: Password for dedicated user
    ports:
      - "1433:1433" # Map host port 1433 to container port 1433 (default SQL Server)
    volumes:
      - sqlserver_data:/var/opt/mssql # Persist database data

  citaseps-app:
    container_name: citaseps-web-app
    build:
      context: ./CitasEPS # Path to the directory containing the Dockerfile
      dockerfile: Dockerfile
    ports:
      # Map a host port (e.g., 8080 for HTTP) to the container's exposed port 80
      - "8080:80"
      # Map a host port (e.g., 8081 for HTTPS) to the container's exposed port 443
      # You'll need to handle HTTPS certificates for this to work properly in production
      - "8081:443"
    environment:
      # Override the connection string used by the app to point to the DB container
      # The hostname 'citaseps-db' is automatically resolved by Docker Compose
      # Make sure 'Database=CitasEPSDb' matches your desired database name
      ConnectionStrings__DefaultConnection: "Server=citaseps-db,1433;Database=CitasEPSDb;User ID=sa;Password=${MSSQL_SA_PASSWORD};TrustServerCertificate=True;MultipleActiveResultSets=true"
      # Set ASP.NET Core environment and URLs
      ASPNETCORE_ENVIRONMENT: Development # Or Production
      # Tell Kestrel to listen on the exposed ports inside the container
      ASPNETCORE_URLS: "https://+:443;http://+:80"
      # Optional: Trust the development certificate if using HTTPS within the container
      DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: "false" # Adjust if needed for globalization/localization
    depends_on:
      - citaseps-db # Ensure the database starts before the app

volumes:
  sqlserver_data: # Define the named volume for data persistence
    driver: local 